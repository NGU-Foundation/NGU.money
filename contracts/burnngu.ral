// Burn contract for NGU

Contract Burn (
    token: ByteVec,                                                 // NGU token id
    mut burned: U256,                                               // amount of NGU burned
    dev: Address,                                                   // address of developer
    mut feescollected: U256                                         // fees collected
) {
    // Events
    event Burn(who: Address, howmuch: U256, when: U256)

    // Error Codes
    enum Error {
        InvalidAmount = 0
    }

    // Functions
    pub fn getToken() -> ByteVec {
        return token
    }

    // Contract Functions
    @using(preapprovedAssets = true, assetsInContract = false, updateFields = true, checkExternalCaller = false)
    pub fn burn(mut amount: U256) -> () { // burns NGU

        assert!(amount > 0, Error.InvalidAmount)

        let devfee = amount * 25 * 10000000 / 1000000000

        transferToken!(callerAddress!(), dev, token, devfee)

        feescollected = feescollected + devfee

        amount = amount - devfee

        burned = burned + amount

        burnToken!(callerAddress!(), token, amount)

        emit Burn(callerAddress!(), amount, blockTimeStamp!())
    }
}